# Generated by Django 2.1.9 on 2019-08-27 08:24

import datetime
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import resources.models.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('resources', '0080_payments_related_changes'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('waiting', 'waiting'), ('confirmed', 'confirmed'), ('rejected', 'rejected'), ('expired', 'expired'), ('cancelled', 'cancelled')], default='waiting', max_length=32, verbose_name='state')),
                ('order_number', models.CharField(default=resources.models.utils.generate_id, max_length=64, unique=True, verbose_name='order number')),
                ('reservation', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='order', to='resources.Reservation', verbose_name='reservation')),
            ],
            options={
                'verbose_name': 'order',
                'verbose_name_plural': 'orders',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='OrderLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='quantity')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_lines', to='payments.Order', verbose_name='order')),
            ],
            options={
                'verbose_name': 'order line',
                'verbose_name_plural': 'order lines',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='OrderLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('state_change', models.CharField(blank=True, choices=[('waiting', 'waiting'), ('confirmed', 'confirmed'), ('rejected', 'rejected'), ('expired', 'expired'), ('cancelled', 'cancelled')], max_length=32, verbose_name='state change')),
                ('message', models.TextField(blank=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_entries', to='payments.Order', verbose_name='order log entry')),
            ],
            options={
                'verbose_name': 'order log entry',
                'verbose_name_plural': 'order log entries',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('product_id', models.CharField(db_index=True, editable=False, max_length=100, verbose_name='internal product ID')),
                ('archived_at', models.DateTimeField(db_index=True, default=datetime.datetime(9999, 12, 31, 0, 0, tzinfo=utc), editable=False, verbose_name='archived_at')),
                ('type', models.CharField(choices=[('rent', 'rent'), ('extra', 'extra')], default='rent', max_length=32, verbose_name='type')),
                ('sku', models.CharField(max_length=255, verbose_name='SKU')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='name')),
                ('name_fi', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('name_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('name_sv', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('description_fi', models.TextField(blank=True, null=True, verbose_name='description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='description')),
                ('description_sv', models.TextField(blank=True, null=True, verbose_name='description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='price including VAT')),
                ('tax_percentage', models.DecimalField(choices=[(Decimal('0.00'), '0.00'), (Decimal('10.00'), '10.00'), (Decimal('14.00'), '14.00'), (Decimal('24.00'), '24.00')], decimal_places=2, default=Decimal('24.00'), max_digits=5, verbose_name='tax percentage')),
                ('price_type', models.CharField(choices=[('per_period', 'per period'), ('fixed', 'fixed')], default='per_period', max_length=32, verbose_name='price type')),
                ('price_period', models.DurationField(blank=True, default=datetime.timedelta(0, 3600), null=True, verbose_name='price period')),
                ('max_quantity', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='max quantity')),
                ('resources', models.ManyToManyField(blank=True, related_name='products', to='resources.Resource', verbose_name='resources')),
            ],
            options={
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
                'ordering': ('product_id',),
            },
        ),
        migrations.AddField(
            model_name='orderline',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_lines', to='payments.Product', verbose_name='product'),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('archived_at', 'product_id')},
        ),
    ]
